What happens when you initialize a repository? why do you
need to do it?

When I initialize a repository, a hidden, .git file is
created in the folder with some meta data. I need to 
iniialize the repository in order to commit and track
previous commits for changes i make in my files.

How is the staging area different from the working
directory and the repository? What value do you think it
offer?

The staging area only contains the files added by the 
user, whereas, the working directory and repository 
contains all the files contained in the project. the 
staging area helps separate commits for different files
in a single working directory.

How can you use the staging area to make sure you have 
one commit per logical change?

By adding those files only that are related to one
logical change to the staging area.

What are some situations when branches would be helpful
in keeping your history organized? How would branches
help?

Situations where we would like to try major changes to
a program while at the same time maintaining a working
version of the program. Changes in the structure or
for experimenting with different features. Branching 
helps by maintining a working version of the program
while keeping a track of all changes on a different
branch. Thus, the user can always revert to the 
working version when needed by switching to that branch.

How do the diagrams help you visualize the branch structure?

Using the diagrams I can see the parents for each commit and
therefore, find out at what point the branch originated from
the master branch.

What is the result of merging two branches together? Why do
we represent it in the diagram the way we do?

Merging two branches results in the commit history of both
the branches merging. Thus, commits of both branches can be
accessed using the head at which the branches were merged.
The diagram representation shows merging of two branches,
which is, basically combining the commits of both branches
from the commit where they were they branched off.

What are the pros and cons of Git's automatic merging vs.
always doing merges manually?

Automaic merges save time from merging commits that add or
remove lines of code from the original file. The 
disadvantage is that Git is not sophisticated enough to
adjust changes within lines of code, which results in the
programmer having to manually find and resolve those 
conflicts.
